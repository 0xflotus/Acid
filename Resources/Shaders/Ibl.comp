#version 450

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(rgba16f, set = 0, binding = 0) uniform writeonly imageCube outColour;

layout(set = 0, binding = 1) uniform samplerCube samplerCubemap;

#include "Shaders/Lighting.glsl"

const float roughness = 0.6f;

void main()
{
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    {
        return;
    }

	vec2 coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	vec2 uv = (vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) + vec2(0.5f, 0.5f)) / vec2(WIDTH, HEIGHT);

	for (uint i = 0; i != 6; ++i)
	{
		vec3 localDir = normalize(cube_dir(uv, i));
	    vec3 conv = vec3(0.0f);

	    if (roughness <= 0.0f)
	    {
	        conv = texture(samplerCubemap, localDir).rgb;
	    }
	    else if (roughness >= 1.0f)
	    {
	        conv = diffuse_convolution(samplerCubemap, localDir);
	    }
	    else
	    {
	        conv = specular_convolution(samplerCubemap, localDir, roughness);
	    }

		imageStore(outColour, ivec3(coord, i), vec4(conv, 0.0f));
	}
}
