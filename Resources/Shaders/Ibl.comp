#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba16f, set = 0, binding = 0) uniform writeonly imageCube writeCubemap;

layout(set = 0, binding = 1) uniform samplerCube samplerCubemap;

const float pi = 3.1415926535897932384626433832795f;
const float roughness = 0.6f;

float sqr(float x)
{
	return x * x;
}

vec2 hammersley(uint i, uint N)
{
	uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float radical_inverse = float(bits) * 2.3283064365386963e-10f;
    return vec2(float(i) / float(N), radical_inverse);
}

vec3 importance_sample_GGX(vec2 Xi, vec3 normal, float roughness)
{
	float a2 = sqr(sqr(roughness));

    float phi = 2.0f * pi * Xi.x;
    float cos_theta = sqrt((1.0f - Xi.y) / (1.0f + (a2 - 1.0f) * Xi.y));
    float sin_theta = sqrt(1.0f - sqr(cos_theta));

    vec3 half_vec = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);

    vec3 up = abs(normal.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
    vec3 tangent = normalize(cross(up, normal));
    vec3 bitangent = cross(normal, tangent);

    return normalize(tangent * half_vec.x + bitangent * half_vec.y + normal * half_vec.z);
}

vec3 cube_dir(vec2 texCoord, uint side)
{
	vec2 tex = texCoord * 2.0 - 1.0;
	if(side == 0) return vec3(1.0, -tex.y, -tex.x); // Front.
	if(side == 1) return vec3(-1.0, -tex.y, tex.x); // Back,
	if(side == 2) return vec3(tex.x, 1.0, tex.y); // Right.
	if(side == 3) return vec3(tex.x, -1.0, -tex.y); // Left.
	if(side == 4) return vec3(tex.x, -tex.y, 1.0); // Top.
	if(side == 5) return vec3(-tex.x, -tex.y, -1.0); // Bottom.
	return vec3(1.0);
}

vec3 diffuse_convolution(samplerCube envmap, vec3 normal)
{
	vec3 acc = vec3(0.0f);
	vec3 up = abs(normal.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	vec3 right = normalize(cross(up, normal));
	up = cross(normal, right);
	float sample_delta = 0.05f;
	float samples = 0.0f;

	for (float phi = 0.0f; phi < 2.0f * pi; phi += sample_delta)
	{
		for (float theta = 0.0f; theta < 0.5f * pi; theta += sample_delta)
		{
			vec3 tangent_sample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
			vec3 sample_dir = tangent_sample.x * right + tangent_sample.y * up + tangent_sample.z * normal;

			acc += texture(envmap, sample_dir).rgb * cos(theta) * sin(theta);
			++samples;
		}
	}

	return acc / samples * pi;
}

vec3 specular_convolution(samplerCube envmap, vec3 N, float roughness)
{
	vec3 V = N;
	float total = 0.0f;
	vec3 acc = vec3(0.0f);
	const uint SAMPLE_COUNT = 1024;

	for (uint i = 0; i != SAMPLE_COUNT; ++i)
	{
		vec2 Xi = hammersley(i, SAMPLE_COUNT);
		vec3 H  = importance_sample_GGX(Xi, N, roughness);
		vec3 L  = normalize(2.0f * dot(V, H) * H - V);
		float NoL = max(0.0f, dot(N, L));

		if (NoL > 0.0f)
		{
			acc += texture(envmap, L).rgb * NoL;
			total += NoL;
		}
	}

	return acc / total;
}

void main()
{
	vec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(writeCubemap).xy);

	for (uint i = 0; i != 6; ++i)
	{
		vec3 localDir = normalize(cube_dir(uv, i));
	    vec3 conv = vec3(0.0f);

	    if (roughness <= 0.0f)
	    {
	        conv = texture(samplerCubemap, localDir).rgb;
	    }
	    else if (roughness >= 1.0f)
	    {
	        conv = diffuse_convolution(samplerCubemap, localDir);
	    }
	    else
	    {
	        conv = specular_convolution(samplerCubemap, localDir, roughness);
	    }

		imageStore(writeCubemap, ivec3(coord, i), vec4(conv, 0.0f));
	}
}
