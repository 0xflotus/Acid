#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(rg16, set = 0, binding = 0) uniform writeonly image2D outColour;

const float pi = 3.1415926535897932384626433832795f;

float sqr(float x)
{
	return x * x;
}

vec2 hammersley(uint i, uint N)
{
	uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float radical_inverse = float(bits) * 2.3283064365386963e-10f;
    return vec2(float(i) / float(N), radical_inverse);
}

float G_sub_GGX(float NoV, float k)
{
	float denom = NoV * (1.0f - k) + k;
	return NoV / denom;
}

float G_GGX(float NoV, float NoL, float k)
{
	float ggx_v = G_sub_GGX(NoV, k);
	float ggx_l = G_sub_GGX(NoL, k);
	return ggx_v * ggx_l;
}

vec3 importance_sample_GGX(vec2 Xi, vec3 normal, float roughness)
{
	float a2 = sqr(sqr(roughness));

    float phi = 2.0f * pi * Xi.x;
    float cos_theta = sqrt((1.0f - Xi.y) / (1.0f + (a2 - 1.0f) * Xi.y));
    float sin_theta = sqrt(1.0f - sqr(cos_theta));

    vec3 half_vec = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);

    vec3 up = abs(normal.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
    vec3 tangent = normalize(cross(up, normal));
    vec3 bitangent = cross(normal, tangent);

    return normalize(tangent * half_vec.x + bitangent * half_vec.y + normal * half_vec.z);
}

vec2 integrate_brdf(float NoV, float roughness)
{
	vec3 V = vec3(sqrt(1.0f - NoV * NoV), 0.0f, NoV);

	vec2 integr = vec2(0.0f);

	vec3 N = vec3(0.0f, 0.0f, 1.0f);
	const uint SAMPLE_COUNT = 1024;

	for (uint i = 0; i != SAMPLE_COUNT; ++i)
	{
		vec2 Xi = hammersley(i, SAMPLE_COUNT);
		vec3 H  = importance_sample_GGX(Xi, N, roughness);
		vec3 L  = normalize(2.0f * dot(V, H) * H - V);

		float NoL = max(0.0f, L.z);
		float NoH = max(0.0f, H.z);
		float VoH = max(0.0f, dot(V, H));

		if (NoL > 0.0f)
		{
			float k_ibl = sqr(roughness) * 0.5f;
			float G = G_GGX(NoV, NoL, k_ibl);
			float G_Vis = (G * VoH) / (NoH * NoV);
			float Fc = pow(1.0f - VoH, 5.0f);

			integr += vec2((1.0f - Fc) * G_Vis, Fc * G_Vis);
		}
	}

	return integr / SAMPLE_COUNT;
}

void main()
{
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(outColour).xy);
	imageStore(outColour, ivec2(gl_GlobalInvocationID.xy), vec4(integrate_brdf(uv.x, uv.y), 0.0f, 0.0f));
}